"use strict";!function(){var t,e,s,i,r,a,n,o,h,l,c,u,d,f,p,m,v,g,w,y,x,b,P,k,T,z,O,S,C,I,j,M,A,D,J,F,W;e=function(){class t{static load(e,s){var i;return(i=t.cache[s])||((i=new t).load(e,s),t.cache[s]=i),i}load(t,e){return t.loadJson(e,t=>{var e,s,i;if(t){for(e in s=[],t)i=t[e],s.push(this[e]=i);return s}})}}return t.cache=[],t}.call(void 0),s=function(){return(new Date).getTime()/1e3},r=function(t){return function(e){return 1-t(1-e)}},i=function(t){return function(e){return e<.5?t(2*e)/2:(2-t(2*(1-e)))/2}},a=function(t,e){return n[t]=e,n[t+"EaseOut"]=r(e),n[t+"EaseInOut"]=i(e)},n={linear:function(t){return t},easeOut:function(t){return 1-t},easeInOut:function(t){return t<.5?2*t:2-2*t}},a("quad",(function(t){return t*t})),a("circle",(function(t){return 1-Math.sin(Math.acos(t))})),a("bounce",(function(t){var e,s;for(e=0,s=1;;){if(t>=(7-4*e)/11)return-Math.pow((11-6*e-11*t)/4,2)+Math.pow(s,2);e+=s,s/=2}})),t=function(){class t{reset(){return this.startTime=s(),this.deltaTime=0,this}set(t,e=this.data,s=!1){return this.setFrame(null!=e?e[t]:void 0,s)}setFrame(t,e=!1){return e||this.reset(),t?(this.duration=t.duration||0,this.frame=t.frames):(this.duration=0,this.frame=null),this}play(t){var e,i;if(t=t||s(),this.deltaTime=e=(t-this.startTime)*this.scale,!(i=this.duration))return!1;if(e>i){if(!this.loop)return!1;this.deltaTime%=i}return!0}animate(e,s=e.nodePath,i=e.nodeName){var r,a,o,h,l,c,u,d,f,p,m,v,g,w,y;if((a=this.frame)&&(w=a[s]||a[i]))for(r=this.deltaTime,d=t.props,f=t.propsUsed,o=0,h=w.length;o<h;o++)if(r>=(c=w[o]).end)for(l in p=c.to)y=p[l],f[l]||(d[l]=e[l],f[l]=!0),e[l]=y;else if(r>=c.start)for(l in v=c.func?n[c.func]:n.linear,m=c.to)y=m[l],u=e[l],f[l]||(d[l]=u,f[l]=!0),u||(u=0),y.constructor===Number?(g=v((r-c.start)/(c.end-c.start)),e[l]=(y-u)*g+u):e[l]=y;return this}reciveProps(e){var s,i,r;for(s in i=t.props,r=t.propsUsed)r[s]&&(e[s]=i[s],delete r[s]);return this}save(){var e;return(e=t.propsStack).push(t.props),e.push(t.propsUsed),t.props=[],t.propsUsed=[],this}restore(){var e;return e=t.propsStack,t.propsUsed=e.pop(),t.props=e.pop(),this}createWorkFrame(){return this.loop=!1,this.frame={work:[{start:0,end:0,to:{}}]},this}resetWork(){var e,s;for(e in s=t.propsUsed)s[e]&&(s[e]=!1);return this}clearWork(){var t,e,s;return(t=this.frame.work[0]).start=t.end=0,s=function(){var t;for(e in t=[],s)s[e],t.push(delete s[e]);return t}(),this}animateProps(t,e,s){var i,r,a,n;for(r in this.duration=e,(i=this.frame.work[0]).end=e,i.func=s,n=i.to,t)a=t[r],n[r]=a;return this.reset(),this}}return t.getTime=s,t.prototype.loop=!0,t.prototype.startTime=0,t.prototype.duration=0,t.prototype.deltaTime=0,t.prototype.scale=1,t.props=[],t.propsUsed=[],t.propsStack=[],t}.call(void 0),o=class{constructor(){this.handlers=[]}on(t,e){var s;return e&&((s=this.handlers[t])||(this.handlers[t]=s=[]),s.indexOf(e)<0&&s.push(e)),this}off(t,e){var s,i;return e?(s=this.handlers[t])&&(i=s.indexOf(e))>=0&&s.splice(i,1):delete this.handlers[t],this}trigger(t,e){var s,i,r;if(s=this.handlers[t])for(i=0,r=s.length;i<r;i++)s[i].apply(this,e);return this}},h=function(){class t{static load(e,s){var i;return(i=t.cache[s])||((i=new t).load(e,s),t.cache[s]=i),i}load(t,e){return t.loadJson(e,t=>{this.data=t}),t.loadImage(e+".png",t=>{this.texture=t})}draw(t,e,s,i,r=0){var a;if(a=this.data)switch(e.constructor){case Object:t.drawImage(this.texture,e.x,e.y,e.w,e.h,s+e.cx,i+e.cy,e.w,e.h);break;case Array:this.draw(t,e[Math.floor(r)%e.lenght],s,i);break;case String:this.draw(t,a[e],s,i,r)}return this}}return t.cache=[],t}.call(void 0),l=function(){class t{static add(t){var e,s,i,r;for(e in s=this.locales,i=[],t)r=t[e],i.push(s[e]=r);return i}static text(t,e){return"function"==typeof(t=this.locales[t]||t)?t(e):t}static set(t,e){return this.locales[t]=e}}return t.locales=[],t}.call(void 0),u=function(){class t{static load(e,s){var i;return(i=t.cache[s])||((i=new t).load(e,s),t.cache[s]=i),i}load(t,e){return t.loadJson(e,e=>this.loadData(t,e))}loadData(e,s){var i,r,a,n,o,l,c,u,d;if(s){for(a in s)d=s[a],this[a]=d;if(this.images)for(a in r=this.images,this.images=[],r)i=r[a],this.images[a]=e.loadImage(i);if(this.sprites)for(a in u=this.sprites,this.sprites=[],u)c=u[a],this.sprites[a]=h.load(e,c);if(this.models)for(a in o=this.models,this.models=[],o)n=o[a],this.models[a]="string"==typeof n?t.load(e,n):this.loadData.call(new t,e,n);l=function(t,e=""){var s,i,r;for(s in r=[],t)(i=t[s]).nodePath=e+s,i.nodeName="@"+s,i.before&&l(i.before,i.nodePath+"<"),i.after?r.push(l(i.after,i.nodePath+">")):r.push(void 0);return r},this.bones&&l(this.bones)}return this}}return t.cache=[],t}.call(void 0),m={line:function(t){return t.moveTo(this.x1||0,this.y1||0),t.lineTo(this.x2||0,this.y2||0),this},rect:function(t){return t.rect(this.x||0,this.y||0,this.width||1,this.height||1),this},rectRound:function(t){var e,s,i,r,a;return this.noClose=!1,r=this.x||0,a=this.y||0,i=this.width,e=this.height,i<2*(s=this.radius)&&(s=i/2),e<2*s&&(s=e/2),t.moveTo(r+s,a),t.arcTo(r+i,a,r+i,a+e,s),t.arcTo(r+i,a+e,r,a+e,s),t.arcTo(r,a+e,r,a,s),t.arcTo(r,a,r+i,a,s),this},arc:function(t){return t.arc(this.x||0,this.y||0,this.radius,(this.startAngle||0)*Math.PI/180,(this.endAngle||360)*Math.PI/180,!this.clockwise),this},elipse:function(t){return t.ellipse(this.x||0,this.y||0,this.rx,this.ry,(this.rotation||0)*Math.PI/180,(this.startAngle||0)*Math.PI/180,(this.endAngle||360)*Math.PI/180,!this.clockwise),this},path:function(t){var e,s,i;return s=this.x||0,i=this.y||0,"string"==typeof this.path&&(this.path=new Path2D(this.path)),this.noClose=!0,t.translate(s,i),"f"!==(e=this.draw||"f&s")&&"f&s"!==e||t.fill(this.path),"s"!==e&&"f&s"!==e||t.stroke(this.path),this},node:function(t,e,s,i){var r,a,n,o,h,l,c;if(this.noClose=this.draw=!0,c=e.data,(i=i||(null!=(h=c.models)?h[this.model]:void 0))?(e.data=i,o=i.bones):o=e.data.bones,o){if("string"==typeof(n=this.node))n=o[n];else{for(l=o,r=0,a=n.length;r<a;r++)l=l[n[r]];n=l}n&&(t.translate(this.x||0,this.y||0),e.animation.save(),d.call(n,t,e,s),e.animation.recive())}return e.data=c,this},attach:function(t,e,s){var i;return(i=e.attachment[this.attach])&&m.node.call(this,t,e,s,i),this},image:function(t,e){var s;return this.noClose=this.draw=!0,s=e.data.images[this.image],this.width||this.height?t.drawImage(s,this.x||0,this.y||0,this.width,this.height):t.drawImage(s,this.x||0,this.y||0),this},sprite:function(t,e){var s;return this.noClose=this.draw=!0,(s=this.sprite).constructor===String&&(this.sprite=s=e.data.sprites[s]),s.draw(t,this.frame,this.x||0,this.y||0,this.index),this},text:function(t,e){var s,i;return!0!==this.draw&&(this.drawText=this.draw),s=this.drawText,this.noClose=this.draw=!0,this.font&&(t.font=this.font),this.textAlign&&(t.textAlign=this.textAlign),null!==this.textBaseline&&(t.textBaseline=this.textBaseline),this.direction&&(t.direction=this.direction),i=l.text(this.text,e),"f"!==s&&"f&s"!==s||t.fillText(i,this.x||0,this.y||0,this.maxWidth),"s"!==s&&"f&s"!==s||t.strokeText(i,this.x||0,this.y||0,this.maxWidth),this}},w={linear:function(t){var e,s,i,r,a;for(s=t.createLinearGradient(this.x0||0,this.y0||0,this.x1||0,this.y1||0),i=0,r=(a=this.colorStops).length;i<r;i++)e=a[i],s.addColorStop(e.pos||0,e.color);return s},radial:function(t){var e,s,i,r,a;for(s=t.createRadialGradient(this.x0||0,this.y0||0,this.r0||0,this.x1||0,this.y1||0,this.r1||0),i=0,r=(a=this.colorStops).length;i<r;i++)e=a[i],s.addColorStop(e.pos||0,e.color);return s},pattern:function(t,e){var s;return s=e.data.images[this.image],t.createPattern(s,this.repetition||"repeat")}},v=function(t,e,s){var i;return null!=(i=w[s.type])?i.call(s,t,e):void 0},g=function(t,e){var s,i;return(i=this.stroke)&&(i.constructor===Object&&(this.stroke=v(t,e,i)),t.strokeStyle=this.stroke),(s=this.fill)&&(s.constructor===Object&&(this.fill=v(t,e,s)),t.fillStyle=this.fill),null!==this.lineWidth&&(t.lineWidth=this.lineWidth),null!==this.lineCap&&(t.lineCap=this.lineCap),this.lineJoin&&(t.lineJoin=this.lineJoin),null!==this.lineDashOffset&&(t.lineDashOffset=this.lineDashOffset),this},d=function(t,e,s){var i,r,a,n,o,h;if(t.save(),e.animation.animate(this),t.transform(this.scaleX||1,this.skewY||0,this.skewX||0,this.scaleY||1,this.origX||0,this.origY||0),this.angle&&t.rotate(this.angle*Math.PI/180),g.call(this,t,e),this.noShadow&&(t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0),null!==this.shadowBlur&&(t.shadowBlur=this.shadowBlur),null!==this.shadowColor&&(t.shadowColor=this.shadowColor),null!==this.shadowOffsetX&&(t.shadowOffsetX=this.shadowOffsetX),null!==this.shadowOffsetY&&(t.shadowOffsetY=this.shadowOffsetY),t.globalAlpha=s*(null===this.opacity?1:this.opacity),this.before){for(r in e.animation.save(),n=this.before)(a=n[r]).hide||d.call(a,t,e,s);e.animation.recive()}if(t.beginPath(),null!=(o=m[this.type])&&o.call(this,t,e,s),this.noClose||t.closePath(),"f"!==(i=this.draw||"f&s")&&"f&s"!==i||t.fill(),"s"!==i&&"f&s"!==i||t.stroke(),this.clip&&t.clip(),e.animation.reciveProps(this),this.after)for(r in h=this.after)(a=h[r]).hide||d.call(a,t,e,s);return c.drawOrigin&&(t.fillStyle="#f00",t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0,t.fillRect(-2,-2,4,4)),t.restore(),this},p={poly:function(t,e,s,i){var r,a,n,o,h,l,c,u,d,f;for(o=e[this.verts[0]],l=s.x,u=s.y,f=s.z,d=(o.z||1)*f,h=((o.x||0)+l)*d,c=((o.y||0)+u)*d,t.moveTo(h,c),r=a=1,n=this.verts.length-1;1<=n?a<=n:a>=n;r=1<=n?++a:--a)d=((o=e[this.verts[r]]).z||1)*f,h=((o.x||0)+l)*d,c=((o.y||0)+u)*d,t.lineTo(h,c);return this},part:function(t,e,s,i,r){var a,n,o,h,l,c,u,d,p,m,v,g;if(this.noClose=this.draw=!0,(n=null!=(d=(m=i.data).models)?d[this.model]:void 0)?(i.data=n,u=n.parts):u=i.data.parts,u&&(g=e[this.vert],a={x:s.x+(g.x||0),y:s.y+(g.y||0),z:s.z*(g.z||1)},c=u[this.part])){for(v=i.parts,i.parts=u,h=0,l=(p=c.faces).length;h<l;h++)o=p[h],f.call(o,t,i,a,r);i.parts=v}return i.data=m,this},node:function(t,e,s,i,r){return x(e[this.vert],s).apply(t),d.call(this,t,i,r),this},attach:function(t,e,s){var i;return x(verts[this.vert],camera).apply(t),(i=e.attachment[this.attach])&&m.node.call(this,t,e,s,i),this},elipse:function(t,e,s){var i,r,a,n,o;return n=(a=x(e[this.vert1],s)).x,o=a.y,i=((a=x(e[this.vert2],s)).x-n)/2,r=(a.y-o)/2,t.ellipse(n+i,o+r,i,r,(this.rotation||0)*Math.PI/180,(this.startAngle||0)*Math.PI/180,(this.endAngle||360)*Math.PI/180,!this.clockwise),this}},f=function(t,e,s,i){var r,a;return t.save(),this.stroke,g.call(this,t,e),t.globalAlpha=i*(null===this.opacity?1:this.opacity),t.beginPath(),null!=(a=p[this.type||"poly"])&&a.call(this,t,e.data.verts,s,e,i),this.noClose||t.closePath(),"f"!==(r=this.draw||"f&s")&&"f&s"!==r||t.fill(),"s"!==r&&"f&s"!==r||t.stroke(),t.restore(),this},b={x:0,y:0,scale:1,apply:function(t){return t.transform(this.scale,0,0,this.scale,this.x,this.y)}},y=(c=class{static transform(t,e,s,i){return s=i.z*s,b.x=(t+i.x)*s,b.y=(e+i.y)*s,b.scale=s,b}constructor(e){this.data=e,this.attachment=[],this.animation=new t}setData(t){this.data=t}draw2D(t,e=1){var s,i,r,a,n;if(s=null!=(a=this.data)?a.bones:void 0){for(i in n=[],s)(r=s[i]).hide?n.push(void 0):n.push(d.call(r,t,this,e));return n}}drawNode(t,e,s=1){var i,r;if((i=null!=(r=this.data)?r.bones:void 0)&&(e=i[e]))return d.call(e,t,this,s)}drawPart(t,e,s,i=1){var r,a,n,o,h,l,c;if((o=null!=(h=this.data)?h.parts:void 0)&&(e=o[e])){for(c=[],a=0,n=(l=e.faces).length;a<n;a++)r=l[a],c.push(f.call(r,t,this,s,i));return c}}drawParts(t,e,s=1){var i,r,a,n,o,h;if(n=null!=(o=this.data)?o.parts:void 0){for(i in h=[],n)(a=n[i]).hide?h.push(void 0):h.push(function(){var i,n,o,h;for(h=[],i=0,n=(o=a.faces).length;i<n;i++)r=o[i],h.push(f.call(r,t,this,e,s));return h}.call(this));return h}}}).transform,x=function(t,e){return y(t.x||0,t.y||0,t.z||1,e)},P=class{constructor(t,e){this.context=t,this.camera=e,this.objects=[]}sort(){return this.objects=this.objects.sort((function(t,e){return t.getZ()-e.getZ()})),this}addPart(t,e,s){var i,r;return(null!=(r=t.data)?r.parts:void 0)&&(i=new T(t,e,s=s||{x:0,y:0,z:1}),this.objects.push(i)),this}addNode(t,e,s){var i,r;if(s=s||{x:0,y:0,z:1},null!=(r=t.data)?r.bones:void 0)return i=new k(t,e,s),this.objects.push(i)}addGroup(t){return this.objects.push(t),this}delete(t){return delete t.nodeObj,this.objects=this.objects.filter((function(e){return e.model!==t})),this}draw(){var t,e,s;for(t=0,e=(s=this.objects).length;t<e;t++)s[t].draw(this);return this}},z={x:0,y:0,z:1},T=class{constructor(t,e,s){this.model=t,this.part=e,this.v=s}setPos(t){return this.v.x=t.x,this.v.y=t.y,this.v.z=t.z,this}getZ(){return this.part.z+this.v.z}draw(t){var e,s;return e=t.camera,s=t.context,z.x=this.v.x+e.x,z.y=this.v.y+e.y,z.z=this.v.z*e.z,s.save(),this.scale&&s.scale(this.scale,this.scale),this.model.drawPart(s,this.part,z,this.opacity),s.restore()}},k=class{constructor(t,e,s){this.model=t,this.node=e,this.v=s}setPos(t){return this.v.x=t.x,this.v.y=t.y,this.v.z=t.z,this}getZ(){return this.v.z}draw(t){var e,s,i;return e=t.camera,s=t.context,i=this.v,s.save(),c.transform(i.x,i.y,i.z,e).apply(s),this.scale&&s.scale(this.scale,this.scale),this.model.drawNode(s,this.node,this.opacity),s.restore()}},O=class{constructor(t){this.gamecore=t,this.camera={x:0,y:0,z:1}}set(){return this.gamecore.fill="#000",this}load(){var t,s;return this.drawstage=new P(this.gamecore.context,this.camera),s=u.load(this.gamecore.loader,"models/main_menu"),t=e.load(this.gamecore.loader,"anims/main_menu"),this.gamecore.loader.on("load",()=>(this.model=new c(s),this.model.animation.set("main_menu",t),this.drawstage.addPart(this.model,"main_menu")))}set(){return this.gamecore.fill="#99D9EA"}draw(){return this.camera.x=this.camera.y=0,this.camera.z=1,this.model.animation.animate(this.camera,"camera"),this.drawstage.draw()}update(t,e){return this.model.animation.play(t)}},I={bones:{loader:{type:"arc",draw:"s",radius:40,stroke:"#44f",lineWidth:4,endAngle:80,noClose:!0,angle:50,origX:-40,origY:-40}}},C={duration:1,frames:{"@loader":[{start:0,end:1,to:{angle:410}}]}},S=class{constructor(t){this.gamecore=t,this.camera={x:0,y:0,z:1}}set(){return this.gamecore.fill="#000",this}load(){var t;return this.drawstage=new P(this.gamecore.context,this.camera),this.model=new c((new u).loadData(this.gamecore.loader,I)),this.model.animation.setFrame(C),this.drawstage.addNode(this.model,"loader"),(t=new O(this.gamecore)).load(),this.gamecore.loader.on("load",()=>(setTimeout(()=>this.gamecore.setStage(t),300),this.gamecore.loader.off("load")))}draw(){return this.drawstage.draw()}update(t,e){return this.model.animation.play(t)}},j=function(){var t,e;class s extends o{reset(){return e=t=0}getPercent(){return 1-(0!==t?e/t:0)}updatePercent(){return this.trigger("changepercent",[this.getPercent()])}load(s){var i;return i=this,e++,t++,function(){return null!=s&&s.apply(i,arguments),--e<=0&&(i.reset(),i.trigger("load")),i.updatePercent()}}isLoad(){return e<=0}loadJson(t,e){return e=this.load(e),$.getJSON(t+".json").done(e).fail((function(){return e(null)}))}loadJsonWithMode(t,e,i){return this.loadJson(t,(function(r){return this.loadJson(t+"_"+e,(function(t){return r?(t&&s.combineConfigs(r,t),i(r)):i(t)}))}))}loadImage(t,e){var s;return e=this.load(e),(s=new Image).onload=function(){return e(s)},s.src=t,s}static combineConfigs(t,e){var i,r,a;for(i in e)switch(typeof(a=e[i])){case"object":a?a.constructor!==Array?((r=t[i])||(r=t[i]={}),s.combineConfigs(r,a)):t[i]=a:delete t[i];break;case"undefined":delete t[a];break;default:t[i]=a}return t}}return e=0,t=0,s}.call(void 0),W=(new Date).getMilliseconds(),J=1,F=0,A=function(){var t;return t=(new Date).getMilliseconds(),W>t?(F=J,J=1):J+=1,W=t,F},D=$(".js-fps"),M=function(){class e extends o{constructor(e,s,i="easy"){super(),this.canvas=e,this.context=s,this.mode=i,this.loader=new j,this.gamescreen=$(".gamescreen"),this.setStage(new S(this)),this.time=t.getTime(),this.delta=0,this.fill="#000"}load(){var t;return this.setLocale("ru"),null!=(t=this.stage)&&"function"==typeof t.load&&t.load(),this}setLocale(t){return this.loader.loadJson("locales/locale_"+t,(function(t){return l.add(t)}))}setStage(t){var e;return null!=(e=this.stage)&&"function"==typeof e.unset&&e.unset(),"function"==typeof t.set&&t.set(),this.stage=t,this}render(){var e;return(e=s=>{var i,r,a,n,o;return this.context.save(),null!=(r=this.stage)&&"function"==typeof r.update&&r.update(this.time,this.delta),o=this.canvas.width,i=this.canvas.height,this.context.fillStyle=this.fill,this.context.fillRect(0,0,o,i),this.context.translate(o/2,i/2),null!=(a=this.stage)&&"function"==typeof a.draw&&a.draw(),this.pause||(n=t.getTime()-this.pauseTime,this.delta=n-this.time,this.time=n),this.context.restore(),D.text(A()),window.requestAnimationFrame(e)})(0),this}pause(){return this.pause=!0,this.delta=0}unpause(){if(this.pause)return this.pause=!1,this.pauseTime+=t.getTime()-this.time}}return e.prototype.cameraZoom=0,e.prototype.pauseTime=0,e.prototype.pause=!1,e.prototype.delta=0,e}.call(void 0),$(document).ready((function(){var t,e,s,i,r,a;return t=$("#canvas"),$(".gamescreen"),s=(e=t.get(0)).getContext("2d",{alpha:!1}),(a=function(){return e.width=$(window).width(),e.height=$(window).height()})(),$(window).on("resize",a),(i=new M(e,s)).load(),i.render(),window.gamecore=i,$(".js-stop-propagation").on("mousedown mouseup mousemove touchstart touchmove",(function(t){return t.stopPropagation()})),r=function(t){return"function"==typeof t.requestFullScreen&&t.requestFullScreen(),"function"==typeof t.mozRequestFullScreen&&t.mozRequestFullScreen(),"function"==typeof t.webkitRequestFullScreen?t.webkitRequestFullScreen():void 0},$(".btn-fullscreen").click((function(){return r(document.documentElement)}))}))}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
